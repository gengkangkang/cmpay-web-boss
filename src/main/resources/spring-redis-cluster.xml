<?xml version="1.0" encoding="UTF-8"?>  
<beans	 xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/tx 
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd
         ">    
     
     <description>redis 集群部署 by gkk 2017.01.12</description>
     
     <!-- 配置jedis pool -->
     <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
         
         
          <!-- 最大连接数 -->
        <property name="maxTotal" value="#{env['redis.pool.maxTotal']}"/>
        <!-- 最大空闲时间 -->
        <property name="maxIdle" value="#{env['redis.pool.maxIdle']}"/>
        <!-- 每次最大连接数 -->
        <property name="numTestsPerEvictionRun" value="#{env['redis.pool.numTestsPerEvictionRun']}"/>
        <!-- 释放扫描的扫描间隔 -->
        <property name="timeBetweenEvictionRunsMillis" value="#{env['redis.pool.timeBetweenEvictionRunsMillis']}"/>
        <!-- 连接的最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="#{env['redis.pool.minEvictableIdleTimeMillis']}"/>
        <!-- 连接控歘按时间多久后释放，当空闲时间>该值且空闲连接>最大空闲连接数时直接释放 -->
        <property name="softMinEvictableIdleTimeMillis" value="#{env['redis.pool.softMinEvictableIdleTimeMillis']}"/>
        <!-- 获得链接时的最大等待毫秒数，小于0：阻塞不确定时间，默认-1 -->
        <property name="maxWaitMillis" value="#{env['redis.pool.maxWaitMillis']}"/>
        <!-- 在获得链接的时候检查有效性，默认false -->
        <property name="testOnBorrow" value="#{env['redis.pool.testOnBorrow']}"/>
        <!-- 在空闲时检查有效性，默认false -->
        <property name="testWhileIdle" value="#{env['redis.pool.testWhileIdle']}"/>
        <!-- 连接耗尽时是否阻塞，false报异常，true阻塞超时 默认：true-->
        <property name="blockWhenExhausted" value="#{env['redis.pool.blockWhenExhausted']}"/>
         
     </bean>
     
     <!-- 配置RedisClusterConfiguration -->
<!--      <bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="#{env['redis.maxRedirects']}"></property>
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="#{env['redis.host1']}"/>
                    <constructor-arg name="port" value="#{env['redis.port1']}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="#{env['redis.host2']}"/>
                    <constructor-arg name="port" value="#{env['redis.port2']}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="#{env['redis.host3']}"/>
                    <constructor-arg name="port" value="#{env['redis.port3']}"/>
                </bean>

            </set>
        </property>
    </bean> -->
     
     
     <!-- sentinelcluster -->
       <bean id="sentinelConfiguration"  class="org.springframework.data.redis.connection.RedisSentinelConfiguration">  
        <property name="master">  
            <bean class="org.springframework.data.redis.connection.RedisNode">  
                <property name="name" value="#{env['redis.masterName']}"></property>  
            </bean>  
        </property>  
        <property name="sentinels">  
            <set>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="#{env['redis.sentinel.host1']}"/>
                    <constructor-arg name="port" value="#{env['redis.sentinel.port1']}"/>
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="#{env['redis.sentinel.host2']}"/>
                    <constructor-arg name="port" value="#{env['redis.sentinel.port2']}"/>
                </bean> 
                 <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="#{env['redis.sentinel.host3']}"/>
                    <constructor-arg name="port" value="#{env['redis.sentinel.port3']}"/>
                </bean> 
            </set>  
        </property>  
    </bean> 
     
    <!-- 配置JdeisConnectionFactory -->     
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <constructor-arg name="poolConfig" ref="jedisPoolConfig" /> 
       <!--  <constructor-arg name="clusterConfig" ref="redisClusterConfiguration" />  -->
         <constructor-arg name="sentinelConfig" ref="sentinelConfiguration" /> 
        
   </bean>     

     <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
         <property name="connectionFactory" ref="jedisConnectionFactory" />
 <!--         如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast to String！！！ --> 
       
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>     
       <property name="valueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
       </property>  
       <property name="hashKeySerializer">    
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>    
       </property>  
       <property name="hashValueSerializer">  
          <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>    
        </property>  
     </bean>
       
</beans>  